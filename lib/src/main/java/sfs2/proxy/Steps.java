package sfs2.proxy;

import java.io.DataOutputStream;
import java.util.logging.Logger;

import com.smartfoxserver.v2.entities.data.ISFSObject;
import com.smartfoxserver.v2.protocol.binary.PacketHeader;

import sfs2x.client.SmartFox;
import sfs2x.client.core.SFSIOHandler;

class Steps extends SFSDataManipulation implements Runnable {
    private final DataOutputStream socketOut;
    PacketHeader packetHeader;
    
    static Logger logger = Logger.getLogger(Main.class.getName()); 
   
    
	public Steps(PacketHeader packetHeader, DataOutputStream socketOut) {
		this.packetHeader = packetHeader;
		this.socketOut = socketOut;
		
	}

	@Override
	public void run() {
	
		String[] payloads = {"8000D6120003000163020100016103000D000170120003000163080017757365722E75706461746555736572416374697669747900017204FFFFFFFF00017012000A0007756E6B6E6F776E040000000A000A696E5F76656869636C65040000000A00076379636C696E67040000000A000777616C6B696E67040000000A000772756E6E696E67040000000A000A73746174696F6E617279040000000A000A73746172745F74696D6505000001827DF8C4CF00057374657073040000000800036C6174074045CA98E000000600036C6E6707C053E4B120000001",
							"8000D6120003000163020100016103000D000170120003000163080017757365722E75706461746555736572416374697669747900017204FFFFFFFF00017012000A0007756E6B6E6F776E040000000A000A696E5F76656869636C65040000000A00076379636C696E67040000000A000777616C6B696E67040000000A000772756E6E696E67040000000A000A73746174696F6E617279040000000A000A73746172745F74696D6505000001827DF9039700057374657073040000001200036C6174074045CA9E1FFFFFFE00036C6E6707C053E49D00000004",
							"8000D6120003000163020100016103000D000170120003000163080017757365722E75706461746555736572416374697669747900017204FFFFFFFF00017012000A0007756E6B6E6F776E040000000A000A696E5F76656869636C65040000000A00076379636C696E67040000000A000777616C6B696E67040000000A000772756E6E696E67040000000A000A73746174696F6E617279040000000A000A73746172745F74696D6505000001827DF9423E00057374657073040000001A00036C6174074045CA99A000000700036C6E6707C053E49D20000001",
							"8000D6120003000163020100016103000D000170120003000163080017757365722E75706461746555736572416374697669747900017204FFFFFFFF00017012000A0007756E6B6E6F776E0400000001000777616C6B696E67040000004D000772756E6E696E67040000000900076379636C696E670400000005000A73746174696F6E6172790400000005000A696E5F76656869636C650400000002000A73746172745F74696D6505000001827DF980E900057374657073040000001A00036C6174074045CA94FFFFFFFC00036C6E6707C053E499BFFFFFFD",
							"8000B4120003000163020100016103000D000170120003000163080017757365722E75706461746555736572416374697669747900017204FFFFFFFF0001701200080007756E6B6E6F776E0400000002000777616C6B696E670400000058000772756E6E696E67040000000900076379636C696E670400000001000A73746172745F74696D6505000001827DF9BFB600057374657073040000001B00036C6174074045CA912000000100036C6E6707C053E496C0000001",
							"8000A6120003000163020100016103000D000170120003000163080017757365722E75706461746555736572416374697669747900017204FFFFFFFF0001701200070007756E6B6E6F776E0400000001000777616C6B696E67040000005C000772756E6E696E670400000007000A73746172745F74696D6505000001827DF9FE7600057374657073040000001D00036C6174074045CA8EBFFFFFFA00036C6E6707C053E4947FFFFFFE",
							"8000A6120003000163020100016103000D000170120003000163080017757365722E75706461746555736572416374697669747900017204FFFFFFFF0001701200070007756E6B6E6F776E0400000002000777616C6B696E670400000059000772756E6E696E670400000009000A73746172745F74696D6505000001827DFA3D2E00057374657073040000001B00036C6174074045CA92DFFFFFFF00036C6E6707C053E49840000003",
							"8000A6120003000163020100016103000D000170120003000163080017757365722E75706461746555736572416374697669747900017204FFFFFFFF0001701200070007756E6B6E6F776E0400000001000777616C6B696E67040000005C000772756E6E696E670400000007000A73746172745F74696D6505000001827DFA7BD900057374657073040000001C00036C6174074045CA97DFFFFFFB00036C6E6707C053E49BA0000000",
							"8000B7120003000163020100016103000D000170120003000163080017757365722E75706461746555736572416374697669747900017204FFFFFFFF0001701200080007756E6B6E6F776E0400000003000777616C6B696E67040000005B000772756E6E696E670400000005000A73746174696F6E6172790400000001000A73746172745F74696D6505000001827DFABA8200057374657073040000001F00036C6174074045CA9DE000000200036C6E6707C053E49DBFFFFFFD",
							"8000B7120003000163020100016103000D000170120003000163080017757365722E75706461746555736572416374697669747900017204FFFFFFFF0001701200080007756E6B6E6F776E0400000002000777616C6B696E67040000005D000772756E6E696E670400000004000A696E5F76656869636C650400000001000A73746172745F74696D6505000001827DFAF94100057374657073040000001200036C6174074045CAA0C000000100036C6E6707C053E49C60000000",
							"8000C5120003000163020100016103000D000170120003000163080017757365722E75706461746555736572416374697669747900017204FFFFFFFF0001701200090007756E6B6E6F776E0400000002000777616C6B696E670400000052000772756E6E696E67040000000B000A696E5F76656869636C65040000000300076379636C696E670400000001000A73746172745F74696D6505000001827DFB37E900057374657073040000000E00036C6174074045CAA0C000000100036C6E6707C053E49C40000003",
							"8000C5120003000163020100016103000D000170120003000163080017757365722E75706461746555736572416374697669747900017204FFFFFFFF0001701200090007756E6B6E6F776E0400000002000777616C6B696E670400000055000772756E6E696E670400000008000A696E5F76656869636C65040000000300076379636C696E670400000001000A73746172745F74696D6505000001827DFB76A100057374657073040000000500036C6174074045CAA0C000000100036C6E6707C053E49C60000000",
							};
		
		SmartFox sf = new SmartFox(false);
		SFSIOHandler handler = new SFSIOHandler(sf.getSocketEngine());
		
		long diffTime = 0;
		long prevStartTime = 0;
		boolean flag = true;
		int count = 0;
		for (String payload: payloads){
			try {
				ISFSObject sfsObj = decode(hexStringToByteArray(payload), handler);
				long startTime = sfsObj.getSFSObject("p").getSFSObject("p").getLong("start_time");
				if(flag) {
					flag = false;
					prevStartTime = startTime;
				}
				
				diffTime = startTime-prevStartTime;
				if (count % 3 == 0) {
					ISFSObject sfsObj1 = decode(hexStringToByteArray("80003E120003000163020100016103000D000170120003000163080016757365722E76616C696461746555736572537465707300017204FFFFFFFF000170120000"), handler);
				}

				Thread.sleep(diffTime);
				long currentTimestamp = System.currentTimeMillis();
				sfsObj.getSFSObject("p").getSFSObject("p").putLong("start_time", currentTimestamp);
				logger.info(String.format("Repeating walk at time %d", currentTimestamp));
				this.repeatPayload(sfsObj);
				prevStartTime = startTime;
			
				
			} catch (Exception e) {
				e.printStackTrace();
			}
			//logger.info(String.format("%1$,.2f", o.getDouble("amount")));
			
		}
		
	}
	
	public void repeatPayload(ISFSObject sfsObj) throws Exception {
		//SmartFox sf = new SmartFox(false);
		//SFSIOHandler handler = new SFSIOHandler(sf.getSocketEngine());
		
		//ISFSObject sfsObj = decode(inputBuffer, handler);
		
		// turn into bytes
		byte[] outputBuffer =  super.createPayload(this.packetHeader, sfsObj);
		
		// Write data to socket
		socketOut.write(outputBuffer);
		
	}
}
